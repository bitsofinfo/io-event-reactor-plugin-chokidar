'use strict'

var util = require('util');
var temp = require('temp');
var path = require('path');
var fs = require('fs');
var assert = require('assert');
var sleep = require('sleep');

var EvaluatorUtil = require('io-event-reactor/ioReactor').EvaluatorUtil;
var IoEvent = require('io-event-reactor-plugin-support').IoEvent;
var IoReactorService = require('io-event-reactor/ioReactorService');

var logger = function(severity, origin, message) {
    if (severity != 'verbose') {
        console.log(severity + ' ' + origin + ' ' + message);
    }
};

var errorCallback = function(message,error) {
    console.log("ERROR-CALLBACK! " + message + ' ' + error);
};

/**
* Generates a IoEventService configuration based around a ChockidarMonitorPlugin
*
* @param ioEventsReactedTo array that the 'code1' reactor will add IoEvents to it receives as evidence the 'code1' reactor was triggered
* @param evaluatorFunction - evaluator function that will gate the IoEvents triggered via Chokidar watching 'tempPathFiles' and let them flow (or not) to the code1 reactor
* @param tempPathFiles file paths to be monitored
*/
function generateConfig(ioEventsReactedTo, evaluatorFunction, tempPathFiles) {

    return {
            logFunction: logger,
            errorCallback: errorCallback,

            ioReactors: [

                  {
                      id: "ioReactor-chokidar-test1",

                      // Chokidar monitor
                      monitor: {
                          plugin: "../../",
                          config: {
                              paths: [tempPathFiles],
                              options: {
                                  alwaysStat: false,
                                  awaitWriteFinish: {
                                      stabilityThreshold: 500,
                                      pollInterval: 100
                                  }
                              }
                          }
                      },

                      // evaluators, we have one that will gate the IoEvents
                      // generated by ChokidarMonitorPlugin
                      evaluators: [
                          {
                              evaluator: evaluatorFunction,
                              reactors: ['code1','logger1']
                          }
                      ],

                      // reactors, we have 2, code1 which will place the ioEvent
                      // triggered by Chokidar in ioEventResultMap so that
                      // its existence can be asserted by the test. The other one is just a logger
                      reactors: [

                          { id: "code1",
                            plugin: "./default_plugins/code/codeReactorPlugin",
                            config: {
                                codeFunction: function(ioEvent) {
                                    return new Promise(function(resolve,reject) {
                                        ioEventsReactedTo.push(ioEvent);
                                        resolve(true);
                                    });
                                }
                            }
                          },

                          { id: "logger1",
                            plugin: "./default_plugins/logger/loggerReactorPlugin" }
                      ]

                  }

             ]
        };
};



describe('chokidar-monitor-test', function() {

    temp.track();

    it('Start a Chokidar monitor, validate that events for monitored files are tracked via monitor -> evaluator -> reactor engine flow', function(done) {

        this.timeout(15000);

        // global array where the code1 reactor will place ioEvents it receives
        var ioEventsReactedTo = [];


        var tempPathRoot = null;
        var tempPaths = null;

        // create our target dir where files will be generated and monitored
        temp.mkdir('chokidar-test', function(err, dirPath) {

            if (err) {
                done("Error creating temp dir root: " + err);
            }

            tempPathRoot = dirPath;

            var tempPaths = [tempPathRoot + "/ioTestFile1.txt",
                             tempPathRoot + "/ioTestFile2.txt",
                             tempPathRoot + "/ioTestFile3",
                             tempPathRoot + "/ioTestDir1",
                             tempPathRoot + "/ioTestFileA"];

             var chokidarConfig = generateConfig(ioEventsReactedTo,
                                                 // react to testFile/Dir with number at end only
                                                 EvaluatorUtil.regex(['add','unlink','change','addDir','unlinkDir'],'(.*testFile\\d+|.*testDir\\d+)','ig'),
                                                 tempPaths);


             // start the reactor
             var reactor = new IoReactorService(chokidarConfig);

             // trigger adds
             for (let tempPath of tempPaths) {
                 if (tempPath.indexOf("File") != -1) {
                     fs.writeFile(tempPath, "testdata", function(err) {
                         if (err) {
                             done("Error adding test file data: " + err);
                         }
                     });
                 // dirs
                 } else {
                     fs.mkdir(tempPath, function(err) {
                         if (err) {
                             done("Error adding test dir: " + err);
                         }
                     });
                 }

             }

             // changes 3s later for files only
             setTimeout(function() {
                 for (let tempPath of tempPaths) {
                     if (tempPath.indexOf("File") != -1) {
                          fs.appendFile(tempPath, "testdata-more", null, function(err) {
                              if (err) {
                                  done("Error appending test file data: " + err);
                              }
                          });
                  }
                }
            },3000);

             // deletes 5s later
             setTimeout(function() {
                 for (let tempPath of tempPaths) {
                     if (tempPath.indexOf("File") != -1) {
                         fs.unlink(tempPath, function(err) {
                             if (err) {
                                 done("Error unlinking test file: " + err);
                             }
                         });
                    } else {
                        fs.rmdir(tempPath, function(err) {
                            if (err) {
                                done("Error unlinking test dir: " + err);
                            }
                        });
                    }
                }
             },5000);


             // check that ioEventsReactedTo contains 11 reacted to events...
             // 9 for files (CRUD, -updates for dirs)
             setTimeout(function(){
                 assert.equal(ioEventsReactedTo.length, 11);

                 // chokidar should include stats for add and change
                 for (let ioEvent of ioEventsReactedTo) {

                     if (ioEvent.eventType == 'add' ||
                         ioEvent.eventType == 'change') {

                        assert(ioEvent.optionalFsStats.size > 0);
                    }
                 }

                 done();
             },10000);

        });

    });

});
